figma.showUI(__html__, { width: 300, height: 100 });

function normalizeName(name) {
  return name
    .toLowerCase()
    .replace(/‚ö†Ô∏è/g, "")
    .replace(/[^a-z0-9_]/g, "") // —É–±–∏—Ä–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ "_"
    .trim();
}

function extractStyleFromVariantName(variantName) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ "Style=" –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
  const match = variantName.match(/Style=(.+)/);
  if (match) {
    return match[1].toLowerCase().replace(/[^a-z0-9]/g, "");
  }
  return variantName.toLowerCase().replace(/[^a-z0-9]/g, "");
}

function markVariantForDeletion(variant, reason) {
  console.log(`‚úÖ –ü–æ–º–µ—á–∞–µ–º –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${variant.name} (${reason})`);

  // –î–æ–±–∞–≤–ª—è–µ–º ‚ö†Ô∏è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  if (!variant.name.includes("‚ö†Ô∏è")) {
    variant.name = `${variant.name} ‚ö†Ô∏è`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  try {
    variant.strokes = [
      {
        type: "SOLID",
        color: { r: 1, g: 0, b: 0 }, // –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        opacity: 1
      }
    ];
    variant.strokeWeight = 3; // —Ç–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏
    variant.strokeAlign = "OUTSIDE"; // —Ä–∞–º–∫–∞ —Å–Ω–∞—Ä—É–∂–∏

    return true;
  } catch (err) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫—É –∫: ${variant.name}`, err);
    return false;
  }
}

figma.ui.onmessage = async (msg) => {
  if (msg.type === "load-json") {
    const report = JSON.parse(msg.content);

    const componentSets = figma.currentPage.findAll((node) => node.type === "COMPONENT_SET");
    console.log("üîç –ù–∞–π–¥–µ–Ω–æ ComponentSet:", componentSets.length);

    let markedCount = 0;

    for (const set of componentSets) {
      const iconName = normalizeName(set.name);
      console.log("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:", set.name, "-> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ:", iconName);

      // –ò—â–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤–∞—Ä–∏–∞–Ω—Ç—ã) –≤–Ω—É—Ç—Ä–∏ ComponentSet
      const variants = set.children.filter((child) => child.type === "COMPONENT");

      for (const variant of variants) {
        const styleName = extractStyleFromVariantName(variant.name);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç: "${variant.name}" -> –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: "${styleName}"`);

        let shouldMark = false;
        let reason = "";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Two Tone –≤–∞—Ä–∏–∞–Ω—Ç–æ–º (–ø–æ–º–µ—á–∞–µ–º –≤—Å–µ–≥–¥–∞)
        if (styleName === "twotone") {
          shouldMark = true;
          reason = "Two Tone —Å—Ç–∏–ª—å (—É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)";
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∫–æ–Ω–∫–∞ –≤ –æ—Ç—á–µ—Ç–µ –∏ –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å
        else if (report[iconName]) {
          const remove = (report[iconName].remove || []).map((s) => s.toLowerCase());
          if (remove.includes(styleName)) {
            shouldMark = true;
            reason = "—É–∫–∞–∑–∞–Ω –≤ –æ—Ç—á–µ—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è";
          }
        }

        if (shouldMark) {
          if (markVariantForDeletion(variant, reason)) {
            markedCount++;
          }
        } else {
          console.log(`‚è≠Ô∏è –í–∞—Ä–∏–∞–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è: ${styleName}`);
        }
      }
    }

    figma.closePlugin(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∏–∫–æ–Ω–æ–∫: ${markedCount}`);
  }
};
